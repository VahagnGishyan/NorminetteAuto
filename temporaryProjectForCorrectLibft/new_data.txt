/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_atoi.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: vgishyan <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2021/06/03 23:19:09 by vgishyan          #+#    #+#             */
/*   Updated: 2021/06/03 23:23:38 by vgishyan         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int 		my_iswspace(char c) 
{
	return (c == ' ' || c == '\t' || c == '\n' || c == '\r' || c == '\f' || c == '\v');
}

int 		ft_atoi(const char *str) 
{
	unsigned short	result;
	unsigned short	index;
	unsigned short	negative;
	index = 0;
	negative = 1;
	result = 0;
	while (my_iswspace(str[index] ))
		++index;
	if (str[index] == '+' || str[index] == '-')
		if (str[index++] == '-')
		negative *= -1;
	while (ft_isdigit(str[index] ))
	{
		result *= 10;
		result += str[index] - '0';
		++index;
	}
	return (result * negative);
}

static size_t 	itoa_compute_number_size(long number) 
{
	size_t		size;
	if (number < 0)
		size = 1;
	else
		size = 0;
	while (1)
	{
		number /= 10;
		size++;
		if (number == 0)
			break ;
	}
	return (size);
}

char 		*ft_itoa(int n) 
{
	long		number;
	char		*array;
	size_t		size;
	number = n;
	size = itoa_compute_number_size(n);
	if (get_dynamic_memory(array, (size + 1) * sizeof(char)))
		return (NULL);
	if (number < 0)
	{
		array[0] = '-';
		number *= -1;
	}
	array[size] = '\0';
	while (1)
	{
		array[size - 1] = (number % 10) + '0';
		number /= 10;
		--size;
		if (number == 0)
			break ;
	}
	return (array);
}

void 		*ft_memccpy(void *dest, const void *srce, int value, size_t size) 
{
	unsigned short	index;
	unsigned char	symbol;
	char		*dest_ptr;
	const char	*srce_ptr;
	index = 0;
	symbol = (char)value;
	dest_ptr = (char*)dest;
	srce_ptr = (const char*)srce;
	while (index < size)
	{
		dest_ptr[index] = srce_ptr[index];
		if (dest_ptr[index] == symbol)
			return (dest_ptr + index + 1);
		++index;
	}
	return (NULL);
}

void 		myTest() 
{
	int		x;
	char		y;
	if (x == y || (bool)x)
		++x;
	break ;
	y = '4';
	x = (int)(y);
}
