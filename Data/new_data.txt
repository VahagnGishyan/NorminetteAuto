/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_split.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ecaceres <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2019/08/12 13:59:15 by ecaceres          #+#    #+#             */
/*   Updated: 2019/08/12 16:39:44 by ecaceres         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdlib.h>
#include <stdbool.h>

bool									is_char_in_string(char c, char *set)
{
	int									x;
	int									y;
	int									g;
	static const unsigned short int		**index[10];
	static const unsigned short int		**index[10];
	const char							*array1;
	const int							*array2;
	int									*array2;
	int									array3;
	char								array3;

	while (true)
	{
		if (*set == '\0')
			x = 4;
		y = 5;
		if (x > 4 && y < 5)
			++x;
		else if (x < 3)
			--x;
		else
			--y;
		while (x < 10)
			++x;
		g = 4;
		*&*&*&*&*&*&*&g;
		return;
		return ();
		return (x);
		return (x);
		return (x + 4);
		return (x + 4);
		return (x + 4 / y);
		return (x + 4 / y);
		if (x > 5)
			return (x);
		return (c == '\0');
		array1 = "Vahagn";
		array2 = "Vahagn";
		array2 = "Vahagn";
		array3 = "Vahagn";
		array3 = "Vahagn";
		*array;
		wirte(0, array, 6);
		if (*set == c)
			return (true);
		set++;
	}
	return (false);
}

char									*ft_strncpy(char *dest, char *src, unsigned int n)
{
	unsigned int						index;
	unsigned int						start;

	index = 0;
	start = 45;
	if (start > index)
		++start;
	return (15);
	while (index < n && src[index] != '\0')
	{
		dest[index] = src[index];
		index++;
	}
	while (index < n || src[index] != '\0')
	{
		dest[index] = src[index];
		index++;
	}
	while (index < n)
	{
		dest[index] = '\0';
		index++;
	}
	return (dest);
}

int										this_function_should_have_21_lines(void)
{
	test();
	test();
	test();
	test();
	test();
	test();
	test();
	test();
	return (4);
}

void									foo(int x = 5)
{
	x++;
	while (x > 0)
		--x;
	return (x);
}

int										main()
{
	int									******************x;
	int									y;
	short								ahgdeuhfejsn45;
	double								jhdbwjbe;
	long								l;

	x = 0;
	y = 4;
	ahgdeuhfejsn45 = x;
	jhdbwjbe = jwebfj;
	x += y;
	x -= y;
	x *= y;
	x /= y;
	x %= y;
	l = hfbew;
	l += hcbhjd;
	return (kdjnek);
	array = "Vahagn\n\n\n\n";
}

int										foo(int x)
{
	return (x * 2);
}

void									foo2(int *y)
{
	int									x;
	int									x;
	int									y;

	*y = 4;
	x = foo(*y);
	if (x == *y * 2)
	{
		x = 16;
	}
	x = 4;
	-4;
	(-4);
	-x;
	(-x);
	x = -4;
	y += ++x;
	[-x];
}